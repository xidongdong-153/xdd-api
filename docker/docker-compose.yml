version: '3.9'

services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - NODE_ENV=production
    container_name: xdd-api
    restart: always
    ports:
      - '${PORT:-3100}:${PORT:-3100}'
    environment:
      # 应用配置
      - NODE_ENV=production
      - APP_NAME=${APP_NAME:-xdd-api}
      - PORT=${PORT:-3100}
      - API_PREFIX=${API_PREFIX:-api}
      - API_VERSION=${API_VERSION:-v1}
      
      # 数据库配置
      - DB_HOST=db
      - DB_PORT=${DB_PORT:-3306}
      - DB_USERNAME=${DB_USERNAME:-xdd_user}
      - DB_PASSWORD=${DB_PASSWORD} 
      - DB_DATABASE=${DB_DATABASE:-xdd-api}
      - DB_TIMEZONE=${DB_TIMEZONE:-+08:00}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_PATH=${LOG_PATH:-logs}
      - LOG_MAX_FILES=${LOG_MAX_FILES:-30d}
      - LOG_MAX_SIZE=${LOG_MAX_SIZE:-20m}
      
      # JWT配置
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}  
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET} 
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
    volumes:
      - ../logs:/usr/src/app/logs
    networks:
      - app-network
    depends_on:
      - db
    command: >
      sh -c '
        echo "检查数据库表是否存在..." &&
        tables_count=$(mysql -h db -u"${DB_USERNAME}" -p"${DB_PASSWORD}" "${DB_DATABASE}" -N -e "show tables;" | wc -l) &&
        if [ "$tables_count" -eq 0 ]; then
          echo "数据库为空，执行创建操作..." &&
          pnpm schema:prod:create
        else
          echo "数据库已存在表，执行更新操作..." &&
          pnpm schema:prod:update
        fi &&
        pnpm start:prod
      '

  db:
    image: mysql:8.0
    container_name: xdd-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}  
      MYSQL_DATABASE: ${DB_DATABASE:-xdd-api}
      MYSQL_USER: ${DB_USERNAME:-xdd_user}
      MYSQL_PASSWORD: ${DB_PASSWORD}  
    ports:
      - '${DB_PORT:-3306}:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    ulimits:
      nofile:
        soft: 20000
        hard: 40000
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: xdd-phpmyadmin
    restart: always
    ports:
      - '${PMA_PORT:-8080}:80'
    environment:
      # 基础配置
      PMA_HOSTS: db  # 指定可用的数据库服务器
      PMA_VERBOSE: MySQL  # 显示的服务器名称
      PMA_ABSOLUTE_URI: ${PMA_ABSOLUTE_URI:-}  # 外部访问URL
      
      # 安全配置
      UPLOAD_LIMIT: ${PMA_UPLOAD_LIMIT:-300M}  # 上传文件大小限制
      MAX_EXECUTION_TIME: ${PMA_MAX_EXECUTION_TIME:-600}  # 最大执行时间
      MEMORY_LIMIT: ${PMA_MEMORY_LIMIT:-512M}  # 内存限制
      
      # 登录安全
      ALLOW_NO_PASSWORD: "false"  # 禁止无密码登录
      ALLOW_ROOT_LOGIN: ${PMA_ALLOW_ROOT_LOGIN:-true}  # 是否允许root登录
      HIDE_PHP_VERSION: ${PMA_HIDE_PHP_VERSION:-true}  # 隐藏PHP版本
      
      # UI配置
      PMA_ARBITRARY: ${PMA_ARBITRARY:-0}  # 是否允许任意服务器连接
      PMA_LANG: ${PMA_LANG:-zh_CN}  # 默认语言
      PMA_THEME: ${PMA_THEME:-original}  # 默认主题
      
    volumes:
      - phpmyadmin_sessions:/sessions  # 会话持久化
      - phpmyadmin_config:/etc/phpmyadmin/config.user.inc.php  # 自定义配置持久化
    networks:
      - app-network
    depends_on:
      - db
    healthcheck:  # 健康检查
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:  # 日志配置
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data: {}
  phpmyadmin_sessions: {}  # phpMyAdmin 会话持久化
  phpmyadmin_config: {}    # phpMyAdmin 配置持久化 